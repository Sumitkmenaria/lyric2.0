import React, { useState, useEffect, useCallback } from 'react';
import Header from './components/Header';
import InputForm from './components/InputForm';
import VideoPreview from './components/VideoPreview';
import TimelineEditor from './components/TimelineEditor';
import Loader from './components/Loader';
import { extractLyricsFromAudio } from './services/geminiService';
import { exportVideo } from './services/videoExporter';
import { View, AppState } from './types';

const initialState: AppState = {
  view: View.INPUT,
  audioFile: null,
  imageFile: null,
  audioUrl: null,
  audioDuration: 0,
  imageUrl: null,
  rawLyrics: '',
  structuredLyrics: [],
  error: null,
  isLoading: false,
  isExporting: false,
  exportProgress: 0,
  songName: '',
  creatorName: '',
  aspectRatio: '16:9',
  visualizationStyle: 'classic',
  imageColors: [],
  hindiFont: 'Mukta',
  wasTimingAutoGenerated: false
};

const STORAGE_KEY = 'lyric-video-app-state';

function App() {
  const [appState, setAppState] = useState<AppState>(initialState);

  // Save state to localStorage
  const saveState = useCallback((state: AppState) => {
    const stateToSave = {
      ...state,
      audioFile: null,
      imageFile: null,
      isLoading: false,
      isExporting: false,
      exportProgress: 0,
      error: null
    };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(stateToSave));
  }, []);

  // Load state from localStorage
  useEffect(() => {
    const savedState = localStorage.getItem(STORAGE_KEY);
    if (savedState) {
      try {
        const parsedState = JSON.parse(savedState);
        setAppState(prev => ({
          ...prev,
          ...parsedState,
          audioFile: null,
          imageFile: null,
          isLoading: false,
          isExporting: false,
          exportProgress: 0,
          error: null
        }));
      } catch (error) {
        console.error('Error loading saved state:', error);
      }
    }
  }, []);

  // Save state whenever it changes (except for loading/exporting states)
  useEffect(() => {
    if (!appState.isLoading && !appState.isExporting) {
      saveState(appState);
    }
  }, [appState, saveState]);

  const handleInputSubmit = useCallback((data: {
    audio: File;
    image: File;
    lyrics: string;
    songName: string;
    creatorName: string;
    aspectRatio: any;
    hindiFont: any;
    visualizationStyle: any;
    prestructuredLyrics: any;
  }) => {
    const audioUrl = URL.createObjectURL(data.audio);
    const imageUrl = URL.createObjectURL(data.image);

    setAppState(prev => ({
      ...prev,
      audioFile: data.audio,
      imageFile: data.image,
      audioUrl,
      imageUrl,
      rawLyrics: data.lyrics,
      structuredLyrics: data.prestructuredLyrics || [],
      songName: data.songName,
      creatorName: data.creatorName,
      aspectRatio: data.aspectRatio,
      hindiFont: data.hindiFont,
      visualizationStyle: data.visualizationStyle,
      view: View.PREVIEW
    }));
  }, []);

  const handleTranscribeAudio = useCallback(async () => {
    if (!appState.audioFile) return;

    setAppState(prev => ({ ...prev, isLoading: true }));

    try {
      const transcribedLyrics = await extractLyricsFromAudio(appState.audioFile);
      setAppState(prev => ({
        ...prev,
        rawLyrics: transcribedLyrics,
        structuredLyrics: [],
        wasTimingAutoGenerated: true,
        isLoading: false,
        error: null
      }));
    } catch (error) {
      console.error('Error transcribing audio:', error);
      setAppState(prev => ({ 
        ...prev, 
        isLoading: false,
        error: 'Error transcribing audio. Please try again.'
      }));
    }
  }, [appState.audioFile]);

  const handleAdjustLyrics = useCallback((lyrics: any) => {
    setAppState(prev => ({ ...prev, view: View.INPUT }));
  }, []);

  const handleBack = useCallback(() => {
    setAppState(prev => ({ ...prev, view: View.INPUT }));
  }, []);

  const handleAdjust = useCallback((duration: number) => {
    setAppState(prev => ({ ...prev, view: View.TIMELINE_EDITOR }));
  }, []);

  const handleTimelineCancel = useCallback(() => {
    setAppState(prev => ({ ...prev, view: View.PREVIEW }));
  }, []);

  const handleTimelineSave = useCallback((updatedLyrics: any) => {
    setAppState(prev => ({
      ...prev,
      structuredLyrics: updatedLyrics,
      view: View.PREVIEW
    }));
  }, []);

  const handleSettingsChange = useCallback((settings: any) => {
    setAppState(prev => ({ ...prev, ...settings }));
  }, []);

  const handleExport = useCallback(async () => {
    if (!appState.audioFile || !appState.imageFile || !appState.rawLyrics) return;

    setAppState(prev => ({
      ...prev,
      isExporting: true,
      exportProgress: 0,
      error: null
    }));

    try {
      await exportVideo(
        appState.audioFile,
        appState.imageFile,
        appState.rawLyrics,
        {
          aspectRatio: appState.aspectRatio,
          hindiFont: appState.hindiFont,
          visualizationStyle: appState.visualizationStyle
        },
        (progress, status) => {
          setAppState(prev => ({
            ...prev,
            exportProgress: progress,
            loaderMessage: status
          }));
        }
      );

      setAppState(prev => ({
        ...prev,
        isExporting: false,
        exportProgress: 100,
        loaderMessage: 'Export completed successfully!'
      }));

      setTimeout(() => {
        setAppState(prev => ({
          ...prev,
          exportProgress: 0,
          loaderMessage: undefined
        }));
      }, 3000);

    } catch (error) {
      console.error('Export error:', error);
      setAppState(prev => ({
        ...prev,
        isExporting: false,
        exportProgress: 0,
        error: `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      }));

      setTimeout(() => {
        setAppState(prev => ({
          ...prev,
          error: null
        }));
      }, 5000);
    }
  }, [appState.audioFile, appState.imageFile, appState.rawLyrics, appState.aspectRatio, appState.hindiFont, appState.visualizationStyle]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        {appState.isLoading && (
          <Loader message={appState.loaderMessage || "Transcribing audio..."} />
        )}

        {appState.isExporting && (
          <Loader 
            message={appState.loaderMessage || "Exporting video..."} 
            progress={appState.exportProgress}
          />
        )}

        {!appState.isLoading && !appState.isExporting && appState.view === View.INPUT && (
          <InputForm
            onSubmit={handleInputSubmit}
            onTranscribe={handleTranscribeAudio}
            onAdjustLyrics={handleAdjustLyrics}
            initialData={{
              audio: appState.audioFile,
              image: appState.imageFile,
              lyrics: appState.rawLyrics,
              songName: appState.songName,
              creatorName: appState.creatorName,
              aspectRatio: appState.aspectRatio,
              hindiFont: appState.hindiFont,
              visualizationStyle: appState.visualizationStyle,
              prestructuredLyrics: appState.structuredLyrics
            }}
          />
        )}

        {!appState.isLoading && !appState.isExporting && appState.view === View.PREVIEW && appState.audioUrl && (
          <VideoPreview
            audioUrl={appState.audioUrl}
            imageUrl={appState.imageUrl}
            lyrics={appState.structuredLyrics}
            songName={appState.songName}
            creatorName={appState.creatorName}
            aspectRatio={appState.aspectRatio}
            visualizationStyle={appState.visualizationStyle}
            imageColors={appState.imageColors}
            hindiFont={appState.hindiFont}
            onBack={handleBack}
            onExport={handleExport}
            onAdjust={handleAdjust}
            onSettingsChange={handleSettingsChange}
          />
        )}

        {!appState.isLoading && !appState.isExporting && appState.view === View.TIMELINE_EDITOR && appState.audioUrl && (
          <TimelineEditor
            lyrics={appState.structuredLyrics}
            audioUrl={appState.audioUrl}
            duration={appState.audioDuration}
            onSave={handleTimelineSave}
            onCancel={handleTimelineCancel}
          />
        )}
      </main>
    </div>
  );
}

export default App;